
"""
宏传递，工程中有多个子工程，共享一些宏命令，此脚本添加在编译的perAction中，运行前把宏命令传递出去避免手动修改
使用方式: python macro_transfer.py -f=<project_file> -c=<configuration> -m=<macros> <header>...
  -f=<project_file> Project file to parse to get the macro values. 
  -c=<configuration> Configuration of the target (Debug or Release). 
  -m=<macros> Macros to copy. Use ',' to separate macros without space. 
"""
#coding=utf-8
import re
import sys
import os.path
import hashlib
from docopt import docopt
from pbxproj import XcodeProject

def parse_macro_values(raw_values):
      macro_values = {}
      for raw_value in raw_values:
            pair = raw_value.split("=")
            if len(pair) != 2: continue
            macro_values[pair[0].strip()] = pair[1].strip()

      return macro_values

def write_header(file, macro_values):
      header_line_1 = '// THIS FILE IS GENERATED BY MACRO_TRANSFER. '
      header_line_2 =  '// DO NOT EDIT IT MANUALLY. '
      header_sign = header_line_1 + '\n' + header_line_2 + '\n' 
      if not os.path.isfile(file):
            if not os.path.isdir(os.path.dirname(file)):
                  if os.path.dirname(file):
                        os.mkdir(os.path.dirname(file))
            headerFile = open(file, 'w')
            headerFile.write(header_sign)
            for key in macro_values:
                  str = '#define ' + key + ' ' + macro_values[key] + '\n'
                  headerFile.write(str)
                  print 'Writing ' + file + ': ' + key + '->' + macro_values[key]
            headerFile.close()
      else:
            headerFile = open(file ,'r+')
            content = headerFile.read()
            new_content = content

            new_content_arr = []

            header_added = False
            if not content.startswith(header_sign):
                  header_added = True
                  new_content_arr = [header_line_1, header_line_2]

            keys = macro_values.keys()
            content_arr = content.splitlines()
            macro_def_pattern = '#define[\s]+([0-9A-Za-z_]+)[\s]+[0-9]+'
            for line in content_arr: 
                  print line
                  if line == header_line_1 or line == header_line_2: 
                        if not header_added:
                              new_content_arr.append(line)
                        continue
                  if line == '': 
                        continue
                  match_res = re.search(macro_def_pattern, line)
                  if match_res is None: 
                        print 'Do not match anything'
                        continue
                  is_comment = line.startswith('//')
                  macro_name = (match_res.groups())[0]
                  if macro_name is None: 
                        continue
                  if macro_name in macro_values: 
                        new_line = '#define ' + macro_name + ' ' + macro_values[macro_name]
                        new_content_arr.append(new_line)
                        keys.remove(macro_name)
                  elif not is_comment:
                        new_line = '//' + line
                        new_content_arr.append(new_line)
                  else:
                      new_content_arr.append(line)
            
            for macro_name in keys: 
                  new_line = '#define ' + macro_name + ' ' + macro_values[macro_name]
                  new_content_arr.append(new_line)

            new_content = '\n'.join(new_content_arr)

            if (hashlib.md5(new_content).hexdigest() != hashlib.md5(content).hexdigest()):
                  headerFile.seek(0)
                  headerFile.write(new_content)
                  headerFile.truncate()
            headerFile.close()

def main():
      inputs = docopt(__doc__)
      src_file = inputs["-f"]
      configration = inputs["-c"]
      raw_macros = inputs["-m"]
      headers = inputs["<header>"]
      
      project = XcodeProject.load(src_file)
      raw_macro_values = project.get_flags(u'GCC_PREPROCESSOR_DEFINITIONS', configuration_name=configration)
      
      macro_values = parse_macro_values(raw_macro_values)
      
      macros = raw_macros.split(",")

      values_to_transfer = {}
      for macro in macros:
            if macro in macro_values:
                  values_to_transfer[macro] = macro_values[macro]
      
      for header in headers: 
        write_header(header, values_to_transfer)

        

if __name__ == '__main__':
    main()
